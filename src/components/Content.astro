---
const { title, next, prev } = Astro.props;
---
<main class="content-navigation-enabled">
	<div data-next={next} data-prev={prev}>
		{title ? <h2 class="section-title">{title}</h2> : null }
		<div class="section-body"><slot /></div>
	</div>
</main>

<script>
	import { debounce } from '../script/utils.js';
	import { navigate } from 'astro:transitions/client';

	// Page navigation order
	const pageOrder = ['/', '/whoami/', '/projects/', '/writings/', '/contact/'];
	
	let currentIndex = 0;
	let isNavigating = false;
	let listenersAttached = false;

	// Function to check if current page should have scroll navigation
	function shouldEnableNavigation() {
		// Check if the Content component is present on the page
		const contentElement = document.querySelector('.content-navigation-enabled');
		return contentElement !== null;
	}

	// Function to update current index based on current path
	function updateCurrentIndex() {
		const currentPath = window.location.pathname;
		const index = pageOrder.indexOf(currentPath);
		currentIndex = index !== -1 ? index : 0;
	}

	// Handle wheel events for scroll navigation
	const handleWheel = debounce(async (event: WheelEvent) => {
		if (isNavigating || !shouldEnableNavigation()) return;
		
		event.preventDefault();
		
		let targetIndex;
		if (event.deltaY > 0) {
			// Scroll down - go to next page
			targetIndex = (currentIndex + 1) % pageOrder.length;
		} else {
			// Scroll up - go to previous page  
			targetIndex = (currentIndex - 1 + pageOrder.length) % pageOrder.length;
		}
		
		const targetPage = pageOrder[targetIndex];
		
		isNavigating = true;
		
		try {
			await navigate(targetPage);
		} catch (error) {
			console.error('Navigation error:', error);
		}
		
		// Reset navigation flag after transition
		setTimeout(() => {
			isNavigating = false;
		}, 500);
	}, 150);

	// Handle touch events for mobile
	let touchStartY = 0;
	let touchEndY = 0;

	const handleTouchStart = (event: TouchEvent) => {
		if (!shouldEnableNavigation()) return;
		touchStartY = event.changedTouches[0].screenY;
	};

	const handleTouchEnd = debounce(async (event: TouchEvent) => {
		if (isNavigating || !shouldEnableNavigation()) return;
		
		touchEndY = event.changedTouches[0].screenY;
		const deltaY = touchStartY - touchEndY;
		
		// Minimum swipe distance
		if (Math.abs(deltaY) < 50) return;
		
		let targetIndex;
		if (deltaY > 0) {
			// Swipe up - go to next page
			targetIndex = (currentIndex + 1) % pageOrder.length;
		} else {
			// Swipe down - go to previous page
			targetIndex = (currentIndex - 1 + pageOrder.length) % pageOrder.length;
		}
		
		const targetPage = pageOrder[targetIndex];
		
		isNavigating = true;
		
		try {
			await navigate(targetPage);
		} catch (error) {
			console.error('Navigation error:', error);
		}
		
		setTimeout(() => {
			isNavigating = false;
		}, 500);
	}, 150);

	// Handle keyboard navigation
	const handleKeyDown = async (event: KeyboardEvent) => {
		if (isNavigating || !shouldEnableNavigation()) return;
		
		let targetIndex;
		switch(event.key) {
			case 'ArrowDown':
			case ' ':
				event.preventDefault();
				targetIndex = (currentIndex + 1) % pageOrder.length;
				break;
			case 'ArrowUp':
				event.preventDefault();
				targetIndex = (currentIndex - 1 + pageOrder.length) % pageOrder.length;
				break;
			default:
				return;
		}
		
		const targetPage = pageOrder[targetIndex];
		
		isNavigating = true;
		
		try {
			await navigate(targetPage);
		} catch (error) {
			console.error('Navigation error:', error);
		}
		
		setTimeout(() => {
			isNavigating = false;
		}, 500);
	};

	// Function to attach event listeners
	function attachListeners() {
		if (listenersAttached) return;
		
		document.addEventListener('wheel', handleWheel, { passive: false });
		document.addEventListener('touchstart', handleTouchStart, { passive: true });
		document.addEventListener('touchend', handleTouchEnd, { passive: true });
		document.addEventListener('keydown', handleKeyDown);
		
		listenersAttached = true;
	}

	// Function to remove event listeners
	function removeListeners() {
		if (!listenersAttached) return;
		
		document.removeEventListener('wheel', handleWheel);
		document.removeEventListener('touchstart', handleTouchStart);
		document.removeEventListener('touchend', handleTouchEnd);
		document.removeEventListener('keydown', handleKeyDown);
		
		listenersAttached = false;
	}

	// Function to initialize navigation
	function initializeNavigation() {
		updateCurrentIndex();
		
		// Only attach listeners if navigation should be enabled
		if (shouldEnableNavigation()) {
			attachListeners();
		} else {
			// Remove listeners if navigation should be disabled
			removeListeners();
		}
	}

	// Initialize on first load
	initializeNavigation();

	// Re-initialize after each page transition
	document.addEventListener('astro:page-load', () => {
		// Small delay to ensure DOM is ready
		setTimeout(() => {
			initializeNavigation();
		}, 50);
	});

	// Clean up before page transitions
	document.addEventListener('astro:before-swap', () => {
		removeListeners();
	});
</script>

<style>
	main {
		background-color: transparent;
		width: 100%;
		height: 100%;
		position: fixed;
		display: flex;
		justify-content: flex-start;
		align-items: flex-end;
		overflow: hidden;
		padding-left: 10rem;
	}

	main > div {
		display: flex;
		align-items: left;
		justify-content: flex-start;
		flex-direction: column;
		width: 70vw;
		height: 70vh;
		position: relative;
		overflow: hidden;
	}

	.section-title {
		top: 0;
		position: relative;
		flex-shrink: 0;
		margin: 0;
	}

	.section-body {
		padding-left: 1.5rem;
		display: flex; 
		flex-direction: column; 
		justify-content: start;
		align-items: flex-start;
		position: relative;
		min-height: 400px;
		max-width: 100%;
		box-sizing: border-box;
		overflow-y: auto;
	}

	.section-body > * {
		flex-shrink: 0;
	}

	.section-body > h1 {
		margin-bottom: 1rem;
	}

	.section-body > p, 
	.section-body > ul {
		margin-bottom: 1rem;
	}

	.section-body > br {
		display: none;
	}

	@media screen and (max-width: 900px) {
    main > div {
      width: 80vw;
      height: 90vh;
    }
    
    .section-body {
      height: 75vh;
      min-height: 500px;
    }
  }
</style>
