"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_app_lib_polaroid-cursor_ts";
exports.ids = ["_ssr_app_lib_polaroid-cursor_ts"];
exports.modules = {

/***/ "(ssr)/./app/lib/polaroid-cursor.ts":
/*!************************************!*\
  !*** ./app/lib/polaroid-cursor.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupPolaroidCursor: () => (/* binding */ cleanupPolaroidCursor),\n/* harmony export */   initPolaroidCursor: () => (/* binding */ initPolaroidCursor)\n/* harmony export */ });\n// Polaroid Cursor Effect\n// Creates polaroid photos that follow mouse movement\nlet polaroidInitialized = false;\nlet container = null;\nlet polaroids = [];\nlet mouseX = 0;\nlet mouseY = 0;\nlet lastMouseX = 0;\nlet lastMouseY = 0;\nlet spawnTimer = 0; // Timer for consistent spawning\nlet isMouseMoving = false;\n// All available photos - only from public/photos/\nconst photoList = [\n    \"/photos/AStreetInHaarlem.jpg\",\n    \"/photos/Autopark.jpg\",\n    \"/photos/DeBurcht.jpg\",\n    \"/photos/SAIL.jpg\",\n    \"/photos/SintBonifatiuskerk.jpg\"\n];\nconst config = {\n    maxPolaroids: 20,\n    polaroidLife: 120,\n    spawnInterval: 4,\n    fadeOutDuration: 30,\n    minMovementThreshold: 1,\n    polaroidSize: 140\n};\nfunction getRandomPhoto() {\n    return photoList[Math.floor(Math.random() * photoList.length)];\n}\nfunction createPolaroidElement(x, y) {\n    const element = document.createElement(\"div\");\n    const image = getRandomPhoto();\n    element.className = \"polaroid-photo\";\n    element.innerHTML = `\n    <div class=\"polaroid-inner\">\n      <img src=\"${image}\" alt=\"Random photo\" />\n      <div class=\"polaroid-caption\"></div>\n    </div>\n  `;\n    // Random rotation and slight scale variation\n    const rotation = (Math.random() - 0.5) * 30; // -15 to 15 degrees\n    const scale = 0.8 + Math.random() * 0.4; // 0.8 to 1.2\n    element.style.cssText = `\n    position: fixed;\n    width: ${config.polaroidSize}px;\n    height: ${config.polaroidSize * 1.2}px;\n    pointer-events: none;\n    z-index: 1000;\n    transform: translate(-50%, -50%) rotate(${rotation}deg) scale(${scale});\n    transition: none;\n  `;\n    const polaroidElement = {\n        element,\n        x,\n        y,\n        rotation,\n        scale,\n        opacity: 1,\n        life: config.polaroidLife,\n        maxLife: config.polaroidLife,\n        vx: (Math.random() - 0.5) * 2,\n        vy: (Math.random() - 0.5) * 2,\n        image\n    };\n    if (container) {\n        container.appendChild(element);\n    }\n    return polaroidElement;\n}\nfunction updatePolaroids() {\n    // Update existing polaroids\n    for(let i = polaroids.length - 1; i >= 0; i--){\n        const polaroid = polaroids[i];\n        // Update position with slight drift\n        polaroid.x += polaroid.vx;\n        polaroid.y += polaroid.vy;\n        // Apply slight drag\n        polaroid.vx *= 0.98;\n        polaroid.vy *= 0.98;\n        // Update life\n        polaroid.life--;\n        // Calculate opacity based on remaining life\n        if (polaroid.life < config.fadeOutDuration) {\n            polaroid.opacity = polaroid.life / config.fadeOutDuration;\n        }\n        // Update element position and opacity\n        polaroid.element.style.left = `${polaroid.x}px`;\n        polaroid.element.style.top = `${polaroid.y}px`;\n        polaroid.element.style.opacity = polaroid.opacity.toString();\n        // Remove dead polaroids\n        if (polaroid.life <= 0) {\n            if (container && polaroid.element.parentNode) {\n                container.removeChild(polaroid.element);\n            }\n            polaroids.splice(i, 1);\n        }\n    }\n    // Debug and simplified spawning\n    const dx = mouseX - lastMouseX;\n    const dy = mouseY - lastMouseY;\n    const movement = Math.sqrt(dx * dx + dy * dy);\n    // Always increment timer (for debugging)\n    spawnTimer++;\n    // Debug logging\n    if (spawnTimer % 60 === 0) {\n        console.log(`Mouse: ${mouseX}, ${mouseY}, Movement: ${movement.toFixed(2)}, Polaroids: ${polaroids.length}`);\n    }\n    // Continuous spawning logic - remove limit check for smooth flow\n    if (movement > config.minMovementThreshold) {\n        if (spawnTimer >= config.spawnInterval) {\n            // Always spawn when moving, regardless of current count\n            if (polaroids.length < config.maxPolaroids) {\n                console.log(\"Spawning polaroid!\");\n                const spawnX = mouseX + (Math.random() - 0.5) * 50;\n                const spawnY = mouseY + (Math.random() - 0.5) * 50;\n                polaroids.push(createPolaroidElement(spawnX, spawnY));\n            } else {\n                // Remove oldest polaroid and add new one for continuous flow\n                const oldest = polaroids.shift();\n                if (oldest && container && oldest.element.parentNode) {\n                    container.removeChild(oldest.element);\n                }\n                console.log(\"Replacing oldest polaroid!\");\n                const spawnX = mouseX + (Math.random() - 0.5) * 50;\n                const spawnY = mouseY + (Math.random() - 0.5) * 50;\n                polaroids.push(createPolaroidElement(spawnX, spawnY));\n            }\n            spawnTimer = 0;\n        }\n    }\n    // Don't reset timer when not moving - let it keep counting\n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n}\nfunction animate() {\n    updatePolaroids();\n    requestAnimationFrame(animate);\n}\n// Event handlers\nfunction attachEventListeners() {\n    if (true) return;\n    const mouseMoveHandler = (e)=>{\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n    };\n    const mouseEnterHandler = (e)=>{\n        // Initialize mouse position when entering the page\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        lastMouseX = mouseX;\n        lastMouseY = mouseY;\n    };\n    const touchMoveHandler = (e)=>{\n        e.preventDefault();\n        if (e.touches.length > 0) {\n            const touch = e.touches[0];\n            mouseX = touch.clientX;\n            mouseY = touch.clientY;\n        }\n    };\n    const touchStartHandler = (e)=>{\n        if (e.touches.length > 0) {\n            const touch = e.touches[0];\n            mouseX = touch.clientX;\n            mouseY = touch.clientY;\n            lastMouseX = mouseX;\n            lastMouseY = mouseY;\n        }\n    };\n    document.addEventListener(\"mousemove\", mouseMoveHandler);\n    document.addEventListener(\"mouseenter\", mouseEnterHandler);\n    document.addEventListener(\"touchmove\", touchMoveHandler, {\n        passive: false\n    });\n    document.addEventListener(\"touchstart\", touchStartHandler, {\n        passive: true\n    });\n}\n// Main initialization function\nfunction initPolaroidCursor() {\n    if (true) return;\n    if (polaroidInitialized) {\n        console.log(\"Polaroid cursor already initialized\");\n        return;\n    }\n    console.log(\"Initializing polaroid cursor effect...\");\n    // Create container for polaroids\n    container = document.createElement(\"div\");\n    container.id = \"polaroid-container\";\n    container.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    pointer-events: none;\n    z-index: 1000;\n  `;\n    document.body.appendChild(container);\n    // Initialize mouse position to center, but will be updated on first mouse move\n    mouseX = window.innerWidth / 2;\n    mouseY = window.innerHeight / 2;\n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n    // Get actual mouse position if available\n    document.addEventListener(\"mousemove\", (e)=>{\n        if (mouseX === window.innerWidth / 2 && mouseY === window.innerHeight / 2) {\n            // First mouse move - initialize properly\n            mouseX = e.clientX;\n            mouseY = e.clientY;\n            lastMouseX = mouseX;\n            lastMouseY = mouseY;\n        }\n    }, {\n        once: true\n    });\n    // Attach event listeners\n    attachEventListeners();\n    // Start animation loop\n    animate();\n    polaroidInitialized = true;\n    console.log(\"Polaroid cursor effect initialized successfully!\");\n}\n// Cleanup function\nfunction cleanupPolaroidCursor() {\n    if (container && container.parentNode) {\n        document.body.removeChild(container);\n    }\n    polaroids.forEach((polaroid)=>{\n        if (polaroid.element.parentNode) {\n            polaroid.element.parentNode.removeChild(polaroid.element);\n        }\n    });\n    polaroids = [];\n    container = null;\n    polaroidInitialized = false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/lib/polaroid-cursor.ts\n");

/***/ })

};
;