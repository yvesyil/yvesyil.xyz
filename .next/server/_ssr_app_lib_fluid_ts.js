"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_app_lib_fluid_ts";
exports.ids = ["_ssr_app_lib_fluid_ts"];
exports.modules = {

/***/ "(ssr)/./app/lib/fluid.ts":
/*!**************************!*\
  !*** ./app/lib/fluid.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupFluidSimulation: () => (/* binding */ cleanupFluidSimulation),\n/* harmony export */   initFluidSimulation: () => (/* binding */ initFluidSimulation)\n/* harmony export */ });\n// Working Fluid Simulation for Next.js\n// Simplified but effective implementation that recreates the original look\nlet fluidInitialized = false;\nlet canvas = null;\nlet ctx = null;\n// Fluid state\nlet trails = [];\nlet mouseX = 0;\nlet mouseY = 0;\nlet lastMouseX = 0;\nlet lastMouseY = 0;\nlet animationId = null;\n// Configuration matching original\nconst config = {\n    maxTrails: 200,\n    trailLife: 120,\n    fadeRate: 0.98,\n    splatRadius: 25,\n    velocityMultiplier: 0.3,\n    colorIntensity: 0.8,\n    grainAmount: 0.02\n};\nfunction generateColor(intensity = 1) {\n    // Colors similar to original: red/orange tones\n    const hue = Math.random() * 60; // 0-60 degrees (red to yellow)\n    const saturation = 0.8 + Math.random() * 0.2;\n    const value = 0.6 + intensity * 0.4;\n    return hsvToRgb(hue, saturation, value);\n}\nfunction hsvToRgb(h, s, v) {\n    const c = v * s;\n    const x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    const m = v - c;\n    let r = 0, g = 0, b = 0;\n    if (0 <= h && h < 60) {\n        r = c;\n        g = x;\n        b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x;\n        g = c;\n        b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0;\n        g = c;\n        b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0;\n        g = x;\n        b = c;\n    } else if (240 <= h && h < 300) {\n        r = x;\n        g = 0;\n        b = c;\n    } else if (300 <= h && h < 360) {\n        r = c;\n        g = 0;\n        b = x;\n    }\n    return {\n        r: Math.round((r + m) * 255) * 0.4,\n        g: Math.round((g + m) * 255) * 0.05,\n        b: Math.round((b + m) * 255) * 0.2 // Some blue\n    };\n}\nfunction createTrail(x, y, vx, vy) {\n    const speed = Math.sqrt(vx * vx + vy * vy);\n    const intensity = Math.min(speed * 0.1, 1);\n    return {\n        x,\n        y,\n        vx: vx * config.velocityMultiplier + (Math.random() - 0.5) * 2,\n        vy: vy * config.velocityMultiplier + (Math.random() - 0.5) * 2,\n        life: config.trailLife,\n        maxLife: config.trailLife,\n        size: 2 + Math.random() * 4,\n        color: generateColor(intensity),\n        intensity: intensity\n    };\n}\nfunction updateTrails() {\n    // Update existing trails\n    for(let i = trails.length - 1; i >= 0; i--){\n        const trail = trails[i];\n        // Update position with fluid-like motion\n        trail.x += trail.vx;\n        trail.y += trail.vy;\n        // Apply drag and curl effects\n        trail.vx *= 0.985;\n        trail.vy *= 0.985;\n        // Add some curl/swirl\n        const curl = 0.02;\n        const temp = trail.vx;\n        trail.vx += trail.vy * curl;\n        trail.vy -= temp * curl;\n        // Update life\n        trail.life--;\n        trail.intensity = trail.life / trail.maxLife * config.colorIntensity;\n        // Remove dead trails\n        if (trail.life <= 0) {\n            trails.splice(i, 1);\n        }\n    }\n    // Add new trails based on mouse movement\n    const dx = mouseX - lastMouseX;\n    const dy = mouseY - lastMouseY;\n    const speed = Math.sqrt(dx * dx + dy * dy);\n    if (speed > 1 && trails.length < config.maxTrails) {\n        const numTrails = Math.min(Math.floor(speed * 0.3), 8);\n        for(let i = 0; i < numTrails; i++){\n            const offsetX = (Math.random() - 0.5) * 15;\n            const offsetY = (Math.random() - 0.5) * 15;\n            trails.push(createTrail(mouseX + offsetX, mouseY + offsetY, dx * 0.5 + (Math.random() - 0.5) * 3, dy * 0.5 + (Math.random() - 0.5) * 3));\n        }\n    }\n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n}\nfunction drawFluid() {\n    if (!ctx || !canvas) return;\n    // Clear with dark background and fade effect\n    ctx.fillStyle = \"rgba(7, 10, 7, 0.03)\"; // Very subtle fade\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // Draw trails with glow effect\n    trails.forEach((trail)=>{\n        const alpha = trail.intensity;\n        if (alpha > 0.01) {\n            // Main trail blob\n            ctx.beginPath();\n            ctx.arc(trail.x, trail.y, trail.size, 0, Math.PI * 2);\n            const gradient = ctx.createRadialGradient(trail.x, trail.y, 0, trail.x, trail.y, trail.size * 3);\n            gradient.addColorStop(0, `rgba(${trail.color.r}, ${trail.color.g}, ${trail.color.b}, ${alpha * 0.8})`);\n            gradient.addColorStop(0.5, `rgba(${trail.color.r}, ${trail.color.g}, ${trail.color.b}, ${alpha * 0.4})`);\n            gradient.addColorStop(1, `rgba(${trail.color.r}, ${trail.color.g}, ${trail.color.b}, 0)`);\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            // Additional glow layer\n            ctx.beginPath();\n            ctx.arc(trail.x, trail.y, trail.size * 2, 0, Math.PI * 2);\n            const outerGradient = ctx.createRadialGradient(trail.x, trail.y, 0, trail.x, trail.y, trail.size * 6);\n            outerGradient.addColorStop(0, `rgba(${trail.color.r * 1.2}, ${trail.color.g * 1.2}, ${trail.color.b * 1.2}, ${alpha * 0.3})`);\n            outerGradient.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n            ctx.fillStyle = outerGradient;\n            ctx.fill();\n        }\n    });\n    // Add film grain effect\n    if (Math.random() < 0.3) {\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        for(let i = 0; i < data.length; i += 4){\n            const grain = (Math.random() - 0.5) * config.grainAmount * 255;\n            data[i] += grain; // R\n            data[i + 1] += grain * 0.5; // G\n            data[i + 2] += grain; // B\n        }\n        ctx.putImageData(imageData, 0, 0);\n    }\n}\nfunction animate() {\n    updateTrails();\n    drawFluid();\n    animationId = requestAnimationFrame(animate);\n}\nfunction resizeCanvas() {\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    if (ctx) {\n        ctx.scale(dpr, dpr);\n    }\n    canvas.style.width = rect.width + \"px\";\n    canvas.style.height = rect.height + \"px\";\n}\n// Event handlers\nfunction attachEventListeners() {\n    if (true) return;\n    const body = document.querySelector(\"body\");\n    if (!body) return;\n    const mouseMoveHandler = (e)=>{\n        const rect = canvas.getBoundingClientRect();\n        mouseX = e.clientX - rect.left;\n        mouseY = e.clientY - rect.top;\n    };\n    const touchMoveHandler = (e)=>{\n        e.preventDefault();\n        if (e.touches.length > 0) {\n            const rect = canvas.getBoundingClientRect();\n            const touch = e.touches[0];\n            mouseX = touch.clientX - rect.left;\n            mouseY = touch.clientY - rect.top;\n        }\n    };\n    const resizeHandler = ()=>{\n        resizeCanvas();\n    };\n    body.addEventListener(\"mousemove\", mouseMoveHandler);\n    body.addEventListener(\"touchmove\", touchMoveHandler, {\n        passive: false\n    });\n    window.addEventListener(\"resize\", resizeHandler);\n}\n// Main initialization function\nfunction initFluidSimulation() {\n    if (true) return;\n    if (fluidInitialized) {\n        console.log(\"Fluid already initialized\");\n        return;\n    }\n    console.log(\"Initializing working fluid simulation...\");\n    canvas = document.getElementById(\"fluid\");\n    if (!canvas) {\n        console.error(\"Fluid canvas not found\");\n        return;\n    }\n    ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        console.error(\"Could not get 2D context\");\n        return;\n    }\n    // Setup canvas\n    resizeCanvas();\n    // Initialize mouse position\n    const rect = canvas.getBoundingClientRect();\n    mouseX = rect.width / 2;\n    mouseY = rect.height / 2;\n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n    // Set initial dark background\n    ctx.fillStyle = \"rgb(7, 10, 7)\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // Attach event listeners\n    attachEventListeners();\n    // Start animation loop\n    animate();\n    fluidInitialized = true;\n    console.log(\"Working fluid simulation initialized successfully!\");\n}\n// Cleanup function\nfunction cleanupFluidSimulation() {\n    if (animationId) {\n        cancelAnimationFrame(animationId);\n        animationId = null;\n    }\n    trails = [];\n    fluidInitialized = false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/lib/fluid.ts\n");

/***/ })

};
;