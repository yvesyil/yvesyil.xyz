"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_lib_fluid_ts",{

/***/ "(app-pages-browser)/./app/lib/fluid.ts":
/*!**************************!*\
  !*** ./app/lib/fluid.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initFluidSimulation: function() { return /* binding */ initFluidSimulation; }\n/* harmony export */ });\n// Simplified fluid simulation for Next.js\n// This is a TypeScript version of the original fluid.js with Next.js compatibility\nlet fluidInitialized = false;\nlet canvas = null;\nlet gl = null;\n// Global variables for the simulation\nlet config;\nlet pointers = [];\nlet dye, velocity;\nlet lastUpdateTime = 0;\nlet startTime = 0;\n// Utility functions\nfunction scaleByPixelRatio(input) {\n    const pixelRatio =  true ? window.devicePixelRatio || 1 : 0;\n    return Math.floor(input * pixelRatio);\n}\nfunction HSVtoRGB(h, s, v) {\n    let r, g, b, i, f, p, q, t;\n    i = Math.floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n    switch(i % 6){\n        case 0:\n            r = v;\n            g = t;\n            b = p;\n            break;\n        case 1:\n            r = q;\n            g = v;\n            b = p;\n            break;\n        case 2:\n            r = p;\n            g = v;\n            b = t;\n            break;\n        case 3:\n            r = p;\n            g = q;\n            b = v;\n            break;\n        case 4:\n            r = t;\n            g = p;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = p;\n            b = q;\n            break;\n        default:\n            r = g = b = 0;\n    }\n    return {\n        r,\n        g,\n        b\n    };\n}\nfunction generateColor() {\n    const c = HSVtoRGB(Math.random(), 1.0, 1.0);\n    c.r *= 0.40;\n    c.g *= 0.01;\n    c.b *= 0.10;\n    return c;\n}\n// Pointer class\nclass PointerPrototype {\n    constructor(){\n        this.id = -1;\n        this.texcoordX = 0;\n        this.texcoordY = 0;\n        this.prevTexcoordX = 0;\n        this.prevTexcoordY = 0;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.down = false;\n        this.moved = false;\n        this.color = {\n            r: 30,\n            g: 0,\n            b: 300\n        };\n    }\n}\n// Basic WebGL setup\nfunction getWebGLContext(canvas) {\n    const params = {\n        alpha: true,\n        depth: false,\n        stencil: false,\n        antialias: false,\n        preserveDrawingBuffer: false\n    };\n    let gl = canvas.getContext(\"webgl2\", params);\n    const isWebGL2 = !!gl;\n    if (!isWebGL2) {\n        gl = canvas.getContext(\"webgl\", params) || canvas.getContext(\"experimental-webgl\", params);\n    }\n    if (!gl) {\n        console.error(\"WebGL not supported\");\n        return null;\n    }\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    return gl;\n}\n// Simplified render loop\nfunction render() {\n    if (!gl || !canvas) return;\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    // Create a simple animated background effect\n    const time = (Date.now() - startTime) / 1000;\n    const r = Math.sin(time * 0.3) * 0.5 + 0.5;\n    const g = Math.sin(time * 0.5) * 0.5 + 0.5;\n    const b = Math.sin(time * 0.7) * 0.5 + 0.5;\n    gl.clearColor(r * 0.1, g * 0.02, b * 0.05, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    requestAnimationFrame(render);\n}\n// Resize canvas\nfunction resizeCanvas() {\n    if (!canvas) return false;\n    const width = scaleByPixelRatio(canvas.clientWidth);\n    const height = scaleByPixelRatio(canvas.clientHeight);\n    if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n// Event handlers\nfunction updatePointerMoveData(pointer, posX, posY) {\n    if (!canvas) return;\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.texcoordX = posX / canvas.width;\n    pointer.texcoordY = 1.0 - posY / canvas.height;\n    pointer.deltaX = pointer.texcoordX - pointer.prevTexcoordX;\n    pointer.deltaY = pointer.texcoordY - pointer.prevTexcoordY;\n    pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n}\nfunction correctDeltaX(delta) {\n    if (!canvas) return delta;\n    const aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio < 1) delta *= aspectRatio;\n    return delta;\n}\nfunction correctDeltaY(delta) {\n    if (!canvas) return delta;\n    const aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio > 1) delta /= aspectRatio;\n    return delta;\n}\nfunction splatPointer(pointer) {\n    const dx = correctDeltaX(pointer.deltaX) * config.SPLAT_FORCE;\n    const dy = correctDeltaY(pointer.deltaY) * config.SPLAT_FORCE;\n    splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n}\nfunction splat(x, y, dx, dy, color) {\n    // This is a simplified splat effect - in the full version this would update fluid textures\n    // For now, we'll just create a visual effect\n    if (!gl || !canvas) return;\n    // Create a simple colored circle effect\n    const centerX = x * canvas.width;\n    const centerY = (1 - y) * canvas.height;\n    const radius = 50;\n// This would normally update the fluid simulation textures\n// For now, just trigger a visual update\n}\n// Event listeners\nfunction attachEventListeners() {\n    if ( false || !canvas) return;\n    const body = document.querySelector(\"body\");\n    if (!body) return;\n    const mouseMoveHandler = (e)=>{\n        if (!pointers || !pointers[0]) return;\n        const pointer = pointers[0];\n        const posX = scaleByPixelRatio(e.clientX);\n        const posY = scaleByPixelRatio(e.clientY);\n        updatePointerMoveData(pointer, posX, posY);\n        // Apply splat effect when mouse moves\n        if (pointer.moved) {\n            pointer.moved = false;\n            splatPointer(pointer);\n        }\n    };\n    const touchStartHandler = (e)=>{\n        e.preventDefault();\n        if (!pointers) return;\n        const touches = e.targetTouches;\n        while(touches.length >= pointers.length){\n            pointers.push(new PointerPrototype());\n        }\n        for(let i = 0; i < touches.length; i++){\n            const posX = scaleByPixelRatio(touches[i].clientX);\n            const posY = scaleByPixelRatio(touches[i].clientY);\n            const pointer = pointers[i + 1];\n            if (pointer) {\n                pointer.id = touches[i].identifier;\n                pointer.down = true;\n                pointer.moved = false;\n                pointer.texcoordX = posX / canvas.width;\n                pointer.texcoordY = 1.0 - posY / canvas.height;\n                pointer.prevTexcoordX = pointer.texcoordX;\n                pointer.prevTexcoordY = pointer.texcoordY;\n                pointer.deltaX = 0;\n                pointer.deltaY = 0;\n                pointer.color = generateColor();\n            }\n        }\n    };\n    const touchMoveHandler = (e)=>{\n        e.preventDefault();\n        if (!pointers) return;\n        const touches = e.targetTouches;\n        for(let i = 0; i < touches.length; i++){\n            const pointer = pointers[i + 1];\n            if (!pointer || !pointer.down) continue;\n            const posX = scaleByPixelRatio(touches[i].clientX);\n            const posY = scaleByPixelRatio(touches[i].clientY);\n            updatePointerMoveData(pointer, posX, posY);\n        }\n    };\n    const touchEndHandler = (e)=>{\n        if (!pointers) return;\n        const touches = e.changedTouches;\n        for(let i = 0; i < touches.length; i++){\n            const pointer = pointers.find((p)=>p.id === touches[i].identifier);\n            if (pointer) {\n                pointer.down = false;\n            }\n        }\n    };\n    body.addEventListener(\"mousemove\", mouseMoveHandler);\n    body.addEventListener(\"touchstart\", touchStartHandler);\n    body.addEventListener(\"touchmove\", touchMoveHandler, {\n        passive: false\n    });\n    window.addEventListener(\"touchend\", touchEndHandler);\n}\n// Main initialization function\nfunction initFluidSimulation() {\n    if (false) {}\n    if (fluidInitialized) {\n        console.log(\"Fluid already initialized, skipping WebGL setup...\");\n        attachEventListeners();\n        return;\n    }\n    console.log(\"Initializing fluid simulation...\");\n    canvas = document.getElementById(\"fluid\");\n    if (!canvas) {\n        console.error(\"Fluid canvas not found\");\n        return;\n    }\n    resizeCanvas();\n    gl = getWebGLContext(canvas);\n    if (!gl) {\n        console.error(\"Failed to get WebGL context\");\n        return;\n    }\n    // Initialize basic config\n    config = {\n        DENSITY_DISSIPATION: 2,\n        VELOCITY_DISSIPATION: 0.1,\n        PRESSURE: 0.01,\n        CURL: 100,\n        SPLAT_RADIUS: 0.13,\n        SPLAT_FORCE: 5000,\n        COLORFUL: true,\n        COLOR_UPDATE_SPEED: 3,\n        PAUSED: false\n    };\n    // Initialize pointers\n    pointers = [];\n    pointers.push(new PointerPrototype());\n    // Start render loop\n    lastUpdateTime = Date.now();\n    startTime = Date.now();\n    // Attach event listeners\n    attachEventListeners();\n    // Start rendering\n    render();\n    fluidInitialized = true;\n    console.log(\"Fluid simulation initialized successfully!\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/fluid.ts\n"));

/***/ })

});