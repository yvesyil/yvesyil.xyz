"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_lib_polaroid-cursor_ts",{

/***/ "(app-pages-browser)/./app/lib/polaroid-cursor.ts":
/*!************************************!*\
  !*** ./app/lib/polaroid-cursor.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupPolaroidCursor: function() { return /* binding */ cleanupPolaroidCursor; },\n/* harmony export */   initPolaroidCursor: function() { return /* binding */ initPolaroidCursor; }\n/* harmony export */ });\n// Polaroid Cursor Effect\n// Creates polaroid photos that follow mouse movement\nlet polaroidInitialized = false;\nlet container = null;\nlet polaroids = [];\nlet mouseX = 0;\nlet mouseY = 0;\nlet lastMouseX = 0;\nlet lastMouseY = 0;\nlet spawnTimer = 0; // Timer for consistent spawning\nlet isMouseMoving = false;\n// All available photos - only from public/photos/\nconst photoList = [\n    \"/photos/AStreetInHaarlem.jpg\",\n    \"/photos/Autopark.jpg\",\n    \"/photos/DeBurcht.jpg\",\n    \"/photos/SAIL.jpg\",\n    \"/photos/SintBonifatiuskerk.jpg\"\n];\nconst config = {\n    maxPolaroids: 20,\n    polaroidLife: 120,\n    spawnInterval: 4,\n    fadeOutDuration: 30,\n    minMovementThreshold: 1,\n    polaroidSize: 140\n};\nfunction getRandomPhoto() {\n    return photoList[Math.floor(Math.random() * photoList.length)];\n}\nfunction createPolaroidElement(x, y) {\n    const element = document.createElement(\"div\");\n    const image = getRandomPhoto();\n    element.className = \"polaroid-photo\";\n    element.innerHTML = '\\n    <div class=\"polaroid-inner\">\\n      <img src=\"'.concat(image, '\" alt=\"Random photo\" />\\n      <div class=\"polaroid-caption\"></div>\\n    </div>\\n  ');\n    // Random rotation and slight scale variation\n    const rotation = (Math.random() - 0.5) * 30; // -15 to 15 degrees\n    const scale = 0.8 + Math.random() * 0.4; // 0.8 to 1.2\n    element.style.cssText = \"\\n    position: fixed;\\n    width: \".concat(config.polaroidSize, \"px;\\n    height: \").concat(config.polaroidSize * 1.2, \"px;\\n    pointer-events: none;\\n    z-index: 1000;\\n    transform: translate(-50%, -50%) rotate(\").concat(rotation, \"deg) scale(\").concat(scale, \");\\n    transition: none;\\n  \");\n    const polaroidElement = {\n        element,\n        x,\n        y,\n        rotation,\n        scale,\n        opacity: 1,\n        life: config.polaroidLife,\n        maxLife: config.polaroidLife,\n        vx: (Math.random() - 0.5) * 2,\n        vy: (Math.random() - 0.5) * 2,\n        image\n    };\n    if (container) {\n        container.appendChild(element);\n    }\n    return polaroidElement;\n}\nfunction updatePolaroids() {\n    // Update existing polaroids\n    for(let i = polaroids.length - 1; i >= 0; i--){\n        const polaroid = polaroids[i];\n        // Update position with slight drift\n        polaroid.x += polaroid.vx;\n        polaroid.y += polaroid.vy;\n        // Apply slight drag\n        polaroid.vx *= 0.98;\n        polaroid.vy *= 0.98;\n        // Update life\n        polaroid.life--;\n        // Calculate opacity based on remaining life\n        if (polaroid.life < config.fadeOutDuration) {\n            polaroid.opacity = polaroid.life / config.fadeOutDuration;\n        }\n        // Update element position and opacity\n        polaroid.element.style.left = \"\".concat(polaroid.x, \"px\");\n        polaroid.element.style.top = \"\".concat(polaroid.y, \"px\");\n        polaroid.element.style.opacity = polaroid.opacity.toString();\n        // Remove dead polaroids\n        if (polaroid.life <= 0) {\n            if (container && polaroid.element.parentNode) {\n                container.removeChild(polaroid.element);\n            }\n            polaroids.splice(i, 1);\n        }\n    }\n    // Debug and simplified spawning\n    const dx = mouseX - lastMouseX;\n    const dy = mouseY - lastMouseY;\n    const movement = Math.sqrt(dx * dx + dy * dy);\n    // Always increment timer (for debugging)\n    spawnTimer++;\n    // Debug logging\n    if (spawnTimer % 60 === 0) {\n        console.log(\"Mouse: \".concat(mouseX, \", \").concat(mouseY, \", Movement: \").concat(movement.toFixed(2), \", Polaroids: \").concat(polaroids.length));\n    }\n    // Very simple spawning logic\n    if (movement > config.minMovementThreshold && polaroids.length < config.maxPolaroids) {\n        if (spawnTimer >= config.spawnInterval) {\n            console.log(\"Spawning polaroid!\");\n            const spawnX = mouseX + (Math.random() - 0.5) * 50;\n            const spawnY = mouseY + (Math.random() - 0.5) * 50;\n            polaroids.push(createPolaroidElement(spawnX, spawnY));\n            spawnTimer = 0;\n        }\n    }\n    // Don't reset timer when not moving - let it keep counting\n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n}\nfunction animate() {\n    updatePolaroids();\n    requestAnimationFrame(animate);\n}\n// Event handlers\nfunction attachEventListeners() {\n    if (false) {}\n    const mouseMoveHandler = (e)=>{\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n    };\n    const mouseEnterHandler = (e)=>{\n        // Initialize mouse position when entering the page\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        lastMouseX = mouseX;\n        lastMouseY = mouseY;\n    };\n    const touchMoveHandler = (e)=>{\n        e.preventDefault();\n        if (e.touches.length > 0) {\n            const touch = e.touches[0];\n            mouseX = touch.clientX;\n            mouseY = touch.clientY;\n        }\n    };\n    const touchStartHandler = (e)=>{\n        if (e.touches.length > 0) {\n            const touch = e.touches[0];\n            mouseX = touch.clientX;\n            mouseY = touch.clientY;\n            lastMouseX = mouseX;\n            lastMouseY = mouseY;\n        }\n    };\n    document.addEventListener(\"mousemove\", mouseMoveHandler);\n    document.addEventListener(\"mouseenter\", mouseEnterHandler);\n    document.addEventListener(\"touchmove\", touchMoveHandler, {\n        passive: false\n    });\n    document.addEventListener(\"touchstart\", touchStartHandler, {\n        passive: true\n    });\n}\n// Main initialization function\nfunction initPolaroidCursor() {\n    if (false) {}\n    if (polaroidInitialized) {\n        console.log(\"Polaroid cursor already initialized\");\n        return;\n    }\n    console.log(\"Initializing polaroid cursor effect...\");\n    // Create container for polaroids\n    container = document.createElement(\"div\");\n    container.id = \"polaroid-container\";\n    container.style.cssText = \"\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    width: 100vw;\\n    height: 100vh;\\n    pointer-events: none;\\n    z-index: 1000;\\n  \";\n    document.body.appendChild(container);\n    // Initialize mouse position to center, but will be updated on first mouse move\n    mouseX = window.innerWidth / 2;\n    mouseY = window.innerHeight / 2;\n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n    // Get actual mouse position if available\n    document.addEventListener(\"mousemove\", (e)=>{\n        if (mouseX === window.innerWidth / 2 && mouseY === window.innerHeight / 2) {\n            // First mouse move - initialize properly\n            mouseX = e.clientX;\n            mouseY = e.clientY;\n            lastMouseX = mouseX;\n            lastMouseY = mouseY;\n        }\n    }, {\n        once: true\n    });\n    // Attach event listeners\n    attachEventListeners();\n    // Start animation loop\n    animate();\n    polaroidInitialized = true;\n    console.log(\"Polaroid cursor effect initialized successfully!\");\n}\n// Cleanup function\nfunction cleanupPolaroidCursor() {\n    if (container && container.parentNode) {\n        document.body.removeChild(container);\n    }\n    polaroids.forEach((polaroid)=>{\n        if (polaroid.element.parentNode) {\n            polaroid.element.parentNode.removeChild(polaroid.element);\n        }\n    });\n    polaroids = [];\n    container = null;\n    polaroidInitialized = false;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9saWIvcG9sYXJvaWQtY3Vyc29yLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUJBQXlCO0FBQ3pCLHFEQUFxRDtBQUVyRCxJQUFJQSxzQkFBc0I7QUFDMUIsSUFBSUMsWUFBbUM7QUFDdkMsSUFBSUMsWUFBK0IsRUFBRTtBQUNyQyxJQUFJQyxTQUFTO0FBQ2IsSUFBSUMsU0FBUztBQUNiLElBQUlDLGFBQWE7QUFDakIsSUFBSUMsYUFBYTtBQUNqQixJQUFJQyxhQUFhLEdBQUcsZ0NBQWdDO0FBQ3BELElBQUlDLGdCQUFnQjtBQWdCcEIsa0RBQWtEO0FBQ2xELE1BQU1DLFlBQVk7SUFDaEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBRUQsTUFBTUMsU0FBUztJQUNiQyxjQUFjO0lBQ2RDLGNBQWM7SUFDZEMsZUFBZTtJQUNmQyxpQkFBaUI7SUFDakJDLHNCQUFzQjtJQUN0QkMsY0FBYztBQUNoQjtBQUVBLFNBQVNDO0lBQ1AsT0FBT1IsU0FBUyxDQUFDUyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLE1BQU0sS0FBS1gsVUFBVVksTUFBTSxFQUFFO0FBQ2hFO0FBRUEsU0FBU0Msc0JBQXNCQyxDQUFTLEVBQUVDLENBQVM7SUFDakQsTUFBTUMsVUFBVUMsU0FBU0MsYUFBYSxDQUFDO0lBQ3ZDLE1BQU1DLFFBQVFYO0lBRWRRLFFBQVFJLFNBQVMsR0FBRztJQUNwQkosUUFBUUssU0FBUyxHQUFHLHVEQUVFLE9BQU5GLE9BQU07SUFLdEIsNkNBQTZDO0lBQzdDLE1BQU1HLFdBQVcsQ0FBQ2IsS0FBS0UsTUFBTSxLQUFLLEdBQUUsSUFBSyxJQUFJLG9CQUFvQjtJQUNqRSxNQUFNWSxRQUFRLE1BQU1kLEtBQUtFLE1BQU0sS0FBSyxLQUFLLGFBQWE7SUFFdERLLFFBQVFRLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLHNDQUdaeEIsT0FEREEsT0FBT00sWUFBWSxFQUFDLHFCQUlhZSxPQUhoQ3JCLE9BQU9NLFlBQVksR0FBRyxL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QUNMLFNBQVNuQixPQUFPO1FBQzFEO0lBQ0Y7SUFFQXZCLFlBQVksRUFBRTtJQUNkRCxZQUFZO0lBQ1pELHNCQUFzQjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvbGliL3BvbGFyb2lkLWN1cnNvci50cz84MjY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBvbGFyb2lkIEN1cnNvciBFZmZlY3Rcbi8vIENyZWF0ZXMgcG9sYXJvaWQgcGhvdG9zIHRoYXQgZm9sbG93IG1vdXNlIG1vdmVtZW50XG5cbmxldCBwb2xhcm9pZEluaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCB8IG51bGwgPSBudWxsO1xubGV0IHBvbGFyb2lkczogUG9sYXJvaWRFbGVtZW50W10gPSBbXTtcbmxldCBtb3VzZVggPSAwO1xubGV0IG1vdXNlWSA9IDA7XG5sZXQgbGFzdE1vdXNlWCA9IDA7XG5sZXQgbGFzdE1vdXNlWSA9IDA7XG5sZXQgc3Bhd25UaW1lciA9IDA7IC8vIFRpbWVyIGZvciBjb25zaXN0ZW50IHNwYXduaW5nXG5sZXQgaXNNb3VzZU1vdmluZyA9IGZhbHNlO1xuXG5pbnRlcmZhY2UgUG9sYXJvaWRFbGVtZW50IHtcbiAgZWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICByb3RhdGlvbjogbnVtYmVyO1xuICBzY2FsZTogbnVtYmVyO1xuICBvcGFjaXR5OiBudW1iZXI7XG4gIGxpZmU6IG51bWJlcjtcbiAgbWF4TGlmZTogbnVtYmVyO1xuICB2eDogbnVtYmVyO1xuICB2eTogbnVtYmVyO1xuICBpbWFnZTogc3RyaW5nO1xufVxuXG4vLyBBbGwgYXZhaWxhYmxlIHBob3RvcyAtIG9ubHkgZnJvbSBwdWJsaWMvcGhvdG9zL1xuY29uc3QgcGhvdG9MaXN0ID0gW1xuICAnL3Bob3Rvcy9BU3RyZWV0SW5IYWFybGVtLmpwZycsXG4gICcvcGhvdG9zL0F1dG9wYXJrLmpwZycsXG4gICcvcGhvdG9zL0RlQnVyY2h0LmpwZycsXG4gICcvcGhvdG9zL1NBSUwuanBnJyxcbiAgJy9waG90b3MvU2ludEJvbmlmYXRpdXNrZXJrLmpwZycsXG5dO1xuXG5jb25zdCBjb25maWcgPSB7XG4gIG1heFBvbGFyb2lkczogMjAsIC8vIEhpZ2hlciBsaW1pdCB0byBwcmV2ZW50IHBhdXNlc1xuICBwb2xhcm9pZExpZmU6IDEyMCwgLy8gU2hvcnRlciBsaWZlIHNvIHBob3RvcyBjeWNsZSBmYXN0ZXJcbiAgc3Bhd25JbnRlcnZhbDogNCwgLy8gU3Bhd24gZXZlcnkgNCBmcmFtZXMgKDE1IHRpbWVzIHBlciBzZWNvbmQpXG4gIGZhZGVPdXREdXJhdGlvbjogMzAsIC8vIEZhc3RlciBmYWRlIGZvciBxdWlja2VyIHR1cm5vdmVyXG4gIG1pbk1vdmVtZW50VGhyZXNob2xkOiAxLCAvLyBMb3dlciB0aHJlc2hvbGRcbiAgcG9sYXJvaWRTaXplOiAxNDAsIC8vIEJpZ2dlciBwaG90b3Ncbn07XG5cbmZ1bmN0aW9uIGdldFJhbmRvbVBob3RvKCk6IHN0cmluZyB7XG4gIHJldHVybiBwaG90b0xpc3RbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGhvdG9MaXN0Lmxlbmd0aCldO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQb2xhcm9pZEVsZW1lbnQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBQb2xhcm9pZEVsZW1lbnQge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGltYWdlID0gZ2V0UmFuZG9tUGhvdG8oKTtcbiAgXG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gJ3BvbGFyb2lkLXBob3RvJztcbiAgZWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgPGRpdiBjbGFzcz1cInBvbGFyb2lkLWlubmVyXCI+XG4gICAgICA8aW1nIHNyYz1cIiR7aW1hZ2V9XCIgYWx0PVwiUmFuZG9tIHBob3RvXCIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJwb2xhcm9pZC1jYXB0aW9uXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIGA7XG4gIFxuICAvLyBSYW5kb20gcm90YXRpb24gYW5kIHNsaWdodCBzY2FsZSB2YXJpYXRpb25cbiAgY29uc3Qgcm90YXRpb24gPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAzMDsgLy8gLTE1IHRvIDE1IGRlZ3JlZXNcbiAgY29uc3Qgc2NhbGUgPSAwLjggKyBNYXRoLnJhbmRvbSgpICogMC40OyAvLyAwLjggdG8gMS4yXG4gIFxuICBlbGVtZW50LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHdpZHRoOiAke2NvbmZpZy5wb2xhcm9pZFNpemV9cHg7XG4gICAgaGVpZ2h0OiAke2NvbmZpZy5wb2xhcm9pZFNpemUgKiAxLjJ9cHg7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgei1pbmRleDogMTAwMDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSByb3RhdGUoJHtyb3RhdGlvbn1kZWcpIHNjYWxlKCR7c2NhbGV9KTtcbiAgICB0cmFuc2l0aW9uOiBub25lO1xuICBgO1xuICBcbiAgY29uc3QgcG9sYXJvaWRFbGVtZW50OiBQb2xhcm9pZEVsZW1lbnQgPSB7XG4gICAgZWxlbWVudCxcbiAgICB4LFxuICAgIHksXG4gICAgcm90YXRpb24sXG4gICAgc2NhbGUsXG4gICAgb3BhY2l0eTogMSxcbiAgICBsaWZlOiBjb25maWcucG9sYXJvaWRMaWZlLFxuICAgIG1heExpZmU6IGNvbmZpZy5wb2xhcm9pZExpZmUsXG4gICAgdng6IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIsXG4gICAgdnk6IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIsXG4gICAgaW1hZ2VcbiAgfTtcbiAgXG4gIGlmIChjb250YWluZXIpIHtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH1cbiAgXG4gIHJldHVybiBwb2xhcm9pZEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVBvbGFyb2lkcygpIHtcbiAgLy8gVXBkYXRlIGV4aXN0aW5nIHBvbGFyb2lkc1xuICBmb3IgKGxldCBpID0gcG9sYXJvaWRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgcG9sYXJvaWQgPSBwb2xhcm9pZHNbaV07XG4gICAgXG4gICAgLy8gVXBkYXRlIHBvc2l0aW9uIHdpdGggc2xpZ2h0IGRyaWZ0XG4gICAgcG9sYXJvaWQueCArPSBwb2xhcm9pZC52eDtcbiAgICBwb2xhcm9pZC55ICs9IHBvbGFyb2lkLnZ5O1xuICAgIFxuICAgIC8vIEFwcGx5IHNsaWdodCBkcmFnXG4gICAgcG9sYXJvaWQudnggKj0gMC45ODtcbiAgICBwb2xhcm9pZC52eSAqPSAwLjk4O1xuICAgIFxuICAgIC8vIFVwZGF0ZSBsaWZlXG4gICAgcG9sYXJvaWQubGlmZS0tO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBvcGFjaXR5IGJhc2VkIG9uIHJlbWFpbmluZyBsaWZlXG4gICAgaWYgKHBvbGFyb2lkLmxpZmUgPCBjb25maWcuZmFkZU91dER1cmF0aW9uKSB7XG4gICAgICBwb2xhcm9pZC5vcGFjaXR5ID0gcG9sYXJvaWQubGlmZSAvIGNvbmZpZy5mYWRlT3V0RHVyYXRpb247XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSBlbGVtZW50IHBvc2l0aW9uIGFuZCBvcGFjaXR5XG4gICAgcG9sYXJvaWQuZWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7cG9sYXJvaWQueH1weGA7XG4gICAgcG9sYXJvaWQuZWxlbWVudC5zdHlsZS50b3AgPSBgJHtwb2xhcm9pZC55fXB4YDtcbiAgICBwb2xhcm9pZC5lbGVtZW50LnN0eWxlLm9wYWNpdHkgPSBwb2xhcm9pZC5vcGFjaXR5LnRvU3RyaW5nKCk7XG4gICAgXG4gICAgLy8gUmVtb3ZlIGRlYWQgcG9sYXJvaWRzXG4gICAgaWYgKHBvbGFyb2lkLmxpZmUgPD0gMCkge1xuICAgICAgaWYgKGNvbnRhaW5lciAmJiBwb2xhcm9pZC5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHBvbGFyb2lkLmVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcG9sYXJvaWRzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIERlYnVnIGFuZCBzaW1wbGlmaWVkIHNwYXduaW5nXG4gIGNvbnN0IGR4ID0gbW91c2VYIC0gbGFzdE1vdXNlWDtcbiAgY29uc3QgZHkgPSBtb3VzZVkgLSBsYXN0TW91c2VZO1xuICBjb25zdCBtb3ZlbWVudCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIFxuICAvLyBBbHdheXMgaW5jcmVtZW50IHRpbWVyIChmb3IgZGVidWdnaW5nKVxuICBzcGF3blRpbWVyKys7XG4gIFxuICAvLyBEZWJ1ZyBsb2dnaW5nXG4gIGlmIChzcGF3blRpbWVyICUgNjAgPT09IDApIHtcbiAgICBjb25zb2xlLmxvZyhgTW91c2U6ICR7bW91c2VYfSwgJHttb3VzZVl9LCBNb3ZlbWVudDogJHttb3ZlbWVudC50b0ZpeGVkKDIpfSwgUG9sYXJvaWRzOiAke3BvbGFyb2lkcy5sZW5ndGh9YCk7XG4gIH1cbiAgXG4gIC8vIFZlcnkgc2ltcGxlIHNwYXduaW5nIGxvZ2ljXG4gIGlmIChtb3ZlbWVudCA+IGNvbmZpZy5taW5Nb3ZlbWVudFRocmVzaG9sZCAmJiBwb2xhcm9pZHMubGVuZ3RoIDwgY29uZmlnLm1heFBvbGFyb2lkcykge1xuICAgIGlmIChzcGF3blRpbWVyID49IGNvbmZpZy5zcGF3bkludGVydmFsKSB7XG4gICAgICBjb25zb2xlLmxvZygnU3Bhd25pbmcgcG9sYXJvaWQhJyk7XG4gICAgICBjb25zdCBzcGF3blggPSBtb3VzZVggKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiA1MDtcbiAgICAgIGNvbnN0IHNwYXduWSA9IG1vdXNlWSArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDUwO1xuICAgICAgcG9sYXJvaWRzLnB1c2goY3JlYXRlUG9sYXJvaWRFbGVtZW50KHNwYXduWCwgc3Bhd25ZKSk7XG4gICAgICBzcGF3blRpbWVyID0gMDtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIERvbid0IHJlc2V0IHRpbWVyIHdoZW4gbm90IG1vdmluZyAtIGxldCBpdCBrZWVwIGNvdW50aW5nXG4gIFxuICBsYXN0TW91c2VYID0gbW91c2VYO1xuICBsYXN0TW91c2VZID0gbW91c2VZO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlKCkge1xuICB1cGRhdGVQb2xhcm9pZHMoKTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xufVxuXG4vLyBFdmVudCBoYW5kbGVyc1xuZnVuY3Rpb24gYXR0YWNoRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXG4gIGNvbnN0IG1vdXNlTW92ZUhhbmRsZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIG1vdXNlWCA9IGUuY2xpZW50WDtcbiAgICBtb3VzZVkgPSBlLmNsaWVudFk7XG4gIH07XG5cbiAgY29uc3QgbW91c2VFbnRlckhhbmRsZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIC8vIEluaXRpYWxpemUgbW91c2UgcG9zaXRpb24gd2hlbiBlbnRlcmluZyB0aGUgcGFnZVxuICAgIG1vdXNlWCA9IGUuY2xpZW50WDtcbiAgICBtb3VzZVkgPSBlLmNsaWVudFk7XG4gICAgbGFzdE1vdXNlWCA9IG1vdXNlWDtcbiAgICBsYXN0TW91c2VZID0gbW91c2VZO1xuICB9O1xuXG4gIGNvbnN0IHRvdWNoTW92ZUhhbmRsZXIgPSAoZTogVG91Y2hFdmVudCkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHRvdWNoID0gZS50b3VjaGVzWzBdO1xuICAgICAgbW91c2VYID0gdG91Y2guY2xpZW50WDtcbiAgICAgIG1vdXNlWSA9IHRvdWNoLmNsaWVudFk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHRvdWNoU3RhcnRIYW5kbGVyID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHRvdWNoID0gZS50b3VjaGVzWzBdO1xuICAgICAgbW91c2VYID0gdG91Y2guY2xpZW50WDtcbiAgICAgIG1vdXNlWSA9IHRvdWNoLmNsaWVudFk7XG4gICAgICBsYXN0TW91c2VYID0gbW91c2VYO1xuICAgICAgbGFzdE1vdXNlWSA9IG1vdXNlWTtcbiAgICB9XG4gIH07XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmVIYW5kbGVyKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgbW91c2VFbnRlckhhbmRsZXIpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRvdWNoTW92ZUhhbmRsZXIsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRvdWNoU3RhcnRIYW5kbGVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XG59XG5cbi8vIE1haW4gaW5pdGlhbGl6YXRpb24gZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBpbml0UG9sYXJvaWRDdXJzb3IoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICBcbiAgaWYgKHBvbGFyb2lkSW5pdGlhbGl6ZWQpIHtcbiAgICBjb25zb2xlLmxvZygnUG9sYXJvaWQgY3Vyc29yIGFscmVhZHkgaW5pdGlhbGl6ZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zb2xlLmxvZygnSW5pdGlhbGl6aW5nIHBvbGFyb2lkIGN1cnNvciBlZmZlY3QuLi4nKTtcblxuICAvLyBDcmVhdGUgY29udGFpbmVyIGZvciBwb2xhcm9pZHNcbiAgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5pZCA9ICdwb2xhcm9pZC1jb250YWluZXInO1xuICBjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIGhlaWdodDogMTAwdmg7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgei1pbmRleDogMTAwMDtcbiAgYDtcbiAgXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAvLyBJbml0aWFsaXplIG1vdXNlIHBvc2l0aW9uIHRvIGNlbnRlciwgYnV0IHdpbGwgYmUgdXBkYXRlZCBvbiBmaXJzdCBtb3VzZSBtb3ZlXG4gIG1vdXNlWCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gMjtcbiAgbW91c2VZID0gd2luZG93LmlubmVySGVpZ2h0IC8gMjtcbiAgbGFzdE1vdXNlWCA9IG1vdXNlWDtcbiAgbGFzdE1vdXNlWSA9IG1vdXNlWTtcblxuICAvLyBHZXQgYWN0dWFsIG1vdXNlIHBvc2l0aW9uIGlmIGF2YWlsYWJsZVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xuICAgIGlmIChtb3VzZVggPT09IHdpbmRvdy5pbm5lcldpZHRoIC8gMiAmJiBtb3VzZVkgPT09IHdpbmRvdy5pbm5lckhlaWdodCAvIDIpIHtcbiAgICAgIC8vIEZpcnN0IG1vdXNlIG1vdmUgLSBpbml0aWFsaXplIHByb3Blcmx5XG4gICAgICBtb3VzZVggPSBlLmNsaWVudFg7XG4gICAgICBtb3VzZVkgPSBlLmNsaWVudFk7XG4gICAgICBsYXN0TW91c2VYID0gbW91c2VYO1xuICAgICAgbGFzdE1vdXNlWSA9IG1vdXNlWTtcbiAgICB9XG4gIH0sIHsgb25jZTogdHJ1ZSB9KTtcblxuICAvLyBBdHRhY2ggZXZlbnQgbGlzdGVuZXJzXG4gIGF0dGFjaEV2ZW50TGlzdGVuZXJzKCk7XG4gIFxuICAvLyBTdGFydCBhbmltYXRpb24gbG9vcFxuICBhbmltYXRlKCk7XG5cbiAgcG9sYXJvaWRJbml0aWFsaXplZCA9IHRydWU7XG4gIGNvbnNvbGUubG9nKCdQb2xhcm9pZCBjdXJzb3IgZWZmZWN0IGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSEnKTtcbn1cblxuLy8gQ2xlYW51cCBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFudXBQb2xhcm9pZEN1cnNvcigpIHtcbiAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIucGFyZW50Tm9kZSkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgfVxuICBcbiAgcG9sYXJvaWRzLmZvckVhY2gocG9sYXJvaWQgPT4ge1xuICAgIGlmIChwb2xhcm9pZC5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIHBvbGFyb2lkLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwb2xhcm9pZC5lbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuICBcbiAgcG9sYXJvaWRzID0gW107XG4gIGNvbnRhaW5lciA9IG51bGw7XG4gIHBvbGFyb2lkSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbn1cbiJdLCJuYW1lcyI6WyJwb2xhcm9pZEluaXRpYWxpemVkIiwiY29udGFpbmVyIiwicG9sYXJvaWRzIiwibW91c2VYIiwibW91c2VZIiwibGFzdE1vdXNlWCIsImxhc3RNb3VzZVkiLCJzcGF3blRpbWVyIiwiaXNNb3VzZU1vdmluZyIsInBob3RvTGlzdCIsImNvbmZpZyIsIm1heFBvbGFyb2lkcyIsInBvbGFyb2lkTGlmZSIsInNwYXduSW50ZXJ2YWwiLCJmYWRlT3V0RHVyYXRpb24iLCJtaW5Nb3ZlbWVudFRocmVzaG9sZCIsInBvbGFyb2lkU2l6ZSIsImdldFJhbmRvbVBob3RvIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiY3JlYXRlUG9sYXJvaWRFbGVtZW50IiwieCIsInkiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW1hZ2UiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiLCJyb3RhdGlvbiIsInNjYWxlIiwic3R5bGUiLCJjc3NUZXh0IiwicG9sYXJvaWRFbGVtZW50Iiwib3BhY2l0eSIsImxpZmUiLCJtYXhMaWZlIiwidngiLCJ2eSIsImFwcGVuZENoaWxkIiwidXBkYXRlUG9sYXJvaWRzIiwiaSIsInBvbGFyb2lkIiwibGVmdCIsInRvcCIsInRvU3RyaW5nIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic3BsaWNlIiwiZHgiLCJkeSIsIm1vdmVtZW50Iiwic3FydCIsImNvbnNvbGUiLCJsb2ciLCJ0b0ZpeGVkIiwic3Bhd25YIiwic3Bhd25ZIiwicHVzaCIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhdHRhY2hFdmVudExpc3RlbmVycyIsIm1vdXNlTW92ZUhhbmRsZXIiLCJlIiwiY2xpZW50WCIsImNsaWVudFkiLCJtb3VzZUVudGVySGFuZGxlciIsInRvdWNoTW92ZUhhbmRsZXIiLCJwcmV2ZW50RGVmYXVsdCIsInRvdWNoZXMiLCJ0b3VjaCIsInRvdWNoU3RhcnRIYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJpbml0UG9sYXJvaWRDdXJzb3IiLCJpZCIsImJvZHkiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJvbmNlIiwiY2xlYW51cFBvbGFyb2lkQ3Vyc29yIiwiZm9yRWFjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/polaroid-cursor.ts\n"));

/***/ })

});