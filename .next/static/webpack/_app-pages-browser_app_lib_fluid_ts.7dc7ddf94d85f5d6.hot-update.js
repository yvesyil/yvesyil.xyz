"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_lib_fluid_ts",{

/***/ "(app-pages-browser)/./app/lib/fluid.ts":
/*!**************************!*\
  !*** ./app/lib/fluid.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initFluidSimulation: function() { return /* binding */ initFluidSimulation; }\n/* harmony export */ });\n// Proper fluid simulation for Next.js with localized mouse effects\nlet fluidInitialized = false;\nlet canvas = null;\nlet ctx = null;\nlet particles = [];\nlet mouseX = 0;\nlet mouseY = 0;\nlet mouseVX = 0;\nlet mouseVY = 0;\nlet lastMouseX = 0;\nlet lastMouseY = 0;\n// Configuration\nconst config = {\n    maxParticles: 150,\n    particleLife: 60,\n    trailLength: 20,\n    mouseInfluence: 100,\n    colorVariation: 0.3,\n    fadeSpeed: 0.02\n};\nfunction createParticle(x, y, vx, vy) {\n    const speed = Math.sqrt(vx * vx + vy * vy);\n    const hue = (Date.now() * 0.001 + speed * 10) % 360;\n    return {\n        x,\n        y,\n        vx: vx + (Math.random() - 0.5) * 2,\n        vy: vy + (Math.random() - 0.5) * 2,\n        life: config.particleLife,\n        maxLife: config.particleLife,\n        size: Math.random() * 3 + 1,\n        color: hsvToRgb(hue, 0.8, 1.0)\n    };\n}\nfunction hsvToRgb(h, s, v) {\n    const c = v * s;\n    const x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    const m = v - c;\n    let r = 0, g = 0, b = 0;\n    if (0 <= h && h < 60) {\n        r = c;\n        g = x;\n        b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x;\n        g = c;\n        b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0;\n        g = c;\n        b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0;\n        g = x;\n        b = c;\n    } else if (240 <= h && h < 300) {\n        r = x;\n        g = 0;\n        b = c;\n    } else if (300 <= h && h < 360) {\n        r = c;\n        g = 0;\n        b = x;\n    }\n    return {\n        r: Math.round((r + m) * 255),\n        g: Math.round((g + m) * 255),\n        b: Math.round((b + m) * 255),\n        a: 1\n    };\n}\nfunction updateParticles() {\n    // Update existing particles\n    for(let i = particles.length - 1; i >= 0; i--){\n        const particle = particles[i];\n        // Update position\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        // Apply drag\n        particle.vx *= 0.98;\n        particle.vy *= 0.98;\n        // Update life\n        particle.life--;\n        particle.color.a = particle.life / particle.maxLife;\n        // Remove dead particles\n        if (particle.life <= 0) {\n            particles.splice(i, 1);\n        }\n    }\n    // Add new particles at mouse position if moving\n    const mouseSpeed = Math.sqrt(mouseVX * mouseVX + mouseVY * mouseVY);\n    if (mouseSpeed > 0.5 && particles.length < config.maxParticles) {\n        const numNewParticles = Math.min(3, Math.floor(mouseSpeed * 0.5));\n        for(let i = 0; i < numNewParticles; i++){\n            particles.push(createParticle(mouseX + (Math.random() - 0.5) * 10, mouseY + (Math.random() - 0.5) * 10, mouseVX * 0.3 + (Math.random() - 0.5) * 2, mouseVY * 0.3 + (Math.random() - 0.5) * 2));\n        }\n    }\n}\nfunction drawParticles() {\n    if (!ctx || !canvas) return;\n    // Clear with fade effect\n    ctx.fillStyle = \"rgba(7, 10, 7, 0.05)\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // Draw particles with trails\n    particles.forEach((particle)=>{\n        const alpha = particle.color.a * 0.8;\n        // Draw main particle\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fillStyle = \"rgba(\".concat(particle.color.r, \", \").concat(particle.color.g, \", \").concat(particle.color.b, \", \").concat(alpha, \")\");\n        ctx.fill();\n        // Draw glow effect\n        const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, particle.size * 3);\n        gradient.addColorStop(0, \"rgba(\".concat(particle.color.r, \", \").concat(particle.color.g, \", \").concat(particle.color.b, \", \").concat(alpha * 0.3, \")\"));\n        gradient.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n    });\n    // Draw connections between nearby particles\n    for(let i = 0; i < particles.length; i++){\n        for(let j = i + 1; j < particles.length; j++){\n            const p1 = particles[i];\n            const p2 = particles[j];\n            const dist = Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n            if (dist < 80) {\n                const alpha = (1 - dist / 80) * 0.2 * Math.min(p1.color.a, p2.color.a);\n                ctx.beginPath();\n                ctx.moveTo(p1.x, p1.y);\n                ctx.lineTo(p2.x, p2.y);\n                ctx.strokeStyle = \"rgba(255, 255, 255, \".concat(alpha, \")\");\n                ctx.lineWidth = 0.5;\n                ctx.stroke();\n            }\n        }\n    }\n}\nfunction animate() {\n    updateParticles();\n    drawParticles();\n    requestAnimationFrame(animate);\n}\nfunction resizeCanvas() {\n    if (!canvas) return false;\n    const rect = canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    if (ctx) {\n        ctx.scale(dpr, dpr);\n    }\n    canvas.style.width = rect.width + \"px\";\n    canvas.style.height = rect.height + \"px\";\n    return true;\n}\n// Event handlers\nfunction attachEventListeners() {\n    if ( false || !canvas) return;\n    const body = document.querySelector(\"body\");\n    if (!body) return;\n    const mouseMoveHandler = (e)=>{\n        const rect = canvas.getBoundingClientRect();\n        const newMouseX = e.clientX - rect.left;\n        const newMouseY = e.clientY - rect.top;\n        mouseVX = newMouseX - mouseX;\n        mouseVY = newMouseY - mouseY;\n        mouseX = newMouseX;\n        mouseY = newMouseY;\n    };\n    const touchMoveHandler = (e)=>{\n        e.preventDefault();\n        if (e.touches.length > 0) {\n            const rect = canvas.getBoundingClientRect();\n            const touch = e.touches[0];\n            const newMouseX = touch.clientX - rect.left;\n            const newMouseY = touch.clientY - rect.top;\n            mouseVX = newMouseX - mouseX;\n            mouseVY = newMouseY - mouseY;\n            mouseX = newMouseX;\n            mouseY = newMouseY;\n        }\n    };\n    const resizeHandler = ()=>{\n        resizeCanvas();\n    };\n    body.addEventListener(\"mousemove\", mouseMoveHandler);\n    body.addEventListener(\"touchmove\", touchMoveHandler, {\n        passive: false\n    });\n    window.addEventListener(\"resize\", resizeHandler);\n    // Store handlers for cleanup\n    canvas._eventHandlers = {\n        mouseMoveHandler,\n        touchMoveHandler,\n        resizeHandler\n    };\n}\n// Main initialization function\nfunction initFluidSimulation() {\n    if (false) {}\n    if (fluidInitialized) {\n        console.log(\"Fluid already initialized\");\n        return;\n    }\n    console.log(\"Initializing fluid simulation...\");\n    canvas = document.getElementById(\"fluid\");\n    if (!canvas) {\n        console.error(\"Fluid canvas not found\");\n        return;\n    }\n    ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        console.error(\"Could not get 2D context\");\n        return;\n    }\n    // Set up canvas\n    resizeCanvas();\n    // Initialize mouse position\n    mouseX = canvas.width / 2;\n    mouseY = canvas.height / 2;\n    // Attach event listeners\n    attachEventListeners();\n    // Start animation loop\n    animate();\n    fluidInitialized = true;\n    console.log(\"Fluid simulation initialized successfully!\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/fluid.ts\n"));

/***/ })

});