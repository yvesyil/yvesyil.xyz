"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_lib_fluid_ts",{

/***/ "(app-pages-browser)/./app/lib/fluid.ts":
/*!**************************!*\
  !*** ./app/lib/fluid.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initFluidSimulation: function() { return /* binding */ initFluidSimulation; }\n/* harmony export */ });\n// Proper WebGL Fluid Simulation for Next.js\n// Based on the original Astro implementation but adapted for React\nlet fluidInitialized = false;\nlet canvas = null;\nlet gl = null;\nlet ext;\n// Fluid simulation state\nlet config;\nlet pointers = [];\nlet dye, velocity;\nlet programs = {};\nlet framebuffers = [];\n// Timing\nlet lastUpdateTime = 0;\nlet startTime = 0;\nclass Pointer {\n    constructor(){\n        this.id = -1;\n        this.texcoordX = 0;\n        this.texcoordY = 0;\n        this.prevTexcoordX = 0;\n        this.prevTexcoordY = 0;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.down = false;\n        this.moved = false;\n        this.color = {\n            r: 0.3,\n            g: 0.0,\n            b: 0.1\n        };\n    }\n}\n// Utility functions\nfunction scaleByPixelRatio(input) {\n    const pixelRatio = window.devicePixelRatio || 1;\n    return Math.floor(input * pixelRatio);\n}\nfunction generateColor() {\n    const c = HSVtoRGB(Math.random(), 0.8, 1.0);\n    return {\n        r: c.r * 0.4,\n        g: c.g * 0.05,\n        b: c.b * 0.2\n    };\n}\nfunction HSVtoRGB(h, s, v) {\n    let r, g, b;\n    const i = Math.floor(h * 6);\n    const f = h * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    switch(i % 6){\n        case 0:\n            r = v;\n            g = t;\n            b = p;\n            break;\n        case 1:\n            r = q;\n            g = v;\n            b = p;\n            break;\n        case 2:\n            r = p;\n            g = v;\n            b = t;\n            break;\n        case 3:\n            r = p;\n            g = q;\n            b = v;\n            break;\n        case 4:\n            r = t;\n            g = p;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = p;\n            b = q;\n            break;\n        default:\n            r = g = b = 0;\n    }\n    return {\n        r,\n        g,\n        b\n    };\n}\n// WebGL setup\nfunction getWebGLContext(canvas) {\n    const params = {\n        alpha: true,\n        depth: false,\n        stencil: false,\n        antialias: false,\n        preserveDrawingBuffer: false\n    };\n    let gl = canvas.getContext(\"webgl2\", params);\n    const isWebGL2 = !!gl;\n    if (!isWebGL2) {\n        gl = canvas.getContext(\"webgl\", params);\n    }\n    if (!gl) return null;\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    return {\n        gl,\n        ext: {\n            formatRGBA: {\n                internalFormat: gl.RGBA,\n                format: gl.RGBA\n            },\n            halfFloatTexType: gl.HALF_FLOAT || 0x8D61,\n            supportLinearFiltering: true\n        }\n    };\n}\n// Shader creation\nfunction compileShader(type, source) {\n    if (!gl) return null;\n    const shader = gl.createShader(type);\n    if (!shader) return null;\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(\"Shader compile error:\", gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n    }\n    return shader;\n}\nfunction createProgram(vertexShader, fragmentShader) {\n    if (!gl) return null;\n    const program = gl.createProgram();\n    if (!program) return null;\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error(\"Program link error:\", gl.getProgramInfoLog(program));\n        return null;\n    }\n    return program;\n}\n// Simple shaders for fluid effect\nconst vertexShaderSource = \"\\n  attribute vec2 aPosition;\\n  varying vec2 vUv;\\n  void main () {\\n    vUv = aPosition * 0.5 + 0.5;\\n    gl_Position = vec4(aPosition, 0.0, 1.0);\\n  }\\n\";\nconst fragmentShaderSource = \"\\n  precision mediump float;\\n  varying vec2 vUv;\\n  uniform sampler2D uTexture;\\n  uniform vec2 texelSize;\\n  uniform vec3 color;\\n  uniform vec2 point;\\n  uniform float radius;\\n  uniform float aspectRatio;\\n  uniform float time;\\n  \\n  void main () {\\n    vec2 p = vUv - point.xy;\\n    p.x *= aspectRatio;\\n    \\n    float dist = length(p);\\n    float splat = exp(-dist / radius);\\n    \\n    vec3 base = texture2D(uTexture, vUv).xyz;\\n    vec3 splatColor = color * splat;\\n    \\n    // Add some noise for grain effect\\n    float noise = fract(sin(dot(vUv.xy + time, vec2(12.9898,78.233))) * 43758.5453);\\n    base += (noise - 0.5) * 0.02;\\n    \\n    gl_FragColor = vec4(base + splatColor, 1.0);\\n  }\\n\";\nconst displayShaderSource = \"\\n  precision mediump float;\\n  varying vec2 vUv;\\n  uniform sampler2D uTexture;\\n  uniform float time;\\n  \\n  void main () {\\n    vec3 color = texture2D(uTexture, vUv).xyz;\\n    \\n    // Add film grain\\n    float noise = fract(sin(dot(vUv.xy + time * 0.1, vec2(12.9898,78.233))) * 43758.5453);\\n    color += (noise - 0.5) * 0.03;\\n    \\n    // Fade effect\\n    color *= 0.995;\\n    \\n    gl_FragColor = vec4(color, 1.0);\\n  }\\n\";\n// Create framebuffer\nfunction createFBO(w, h) {\n    if (!gl) return null;\n    gl.activeTexture(gl.TEXTURE0);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    const fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.viewport(0, 0, w, h);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    return {\n        texture,\n        fbo,\n        width: w,\n        height: h,\n        attach (id) {\n            gl.activeTexture(gl.TEXTURE0 + id);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            return id;\n        }\n    };\n}\n// Blit setup\nlet blit;\nfunction setupBlit() {\n    if (!gl) return;\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n        -1,\n        -1,\n        -1,\n        1,\n        1,\n        1,\n        1,\n        -1\n    ]), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([\n        0,\n        1,\n        2,\n        0,\n        2,\n        3\n    ]), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(0);\n    blit = (target)=>{\n        if (!gl) return;\n        if (target == null) {\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        } else {\n            gl.viewport(0, 0, target.width, target.height);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);\n        }\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n    };\n}\n// Main render loop\nfunction render() {\n    if (!gl || !canvas) return;\n    const dt = calcDeltaTime();\n    if (resizeCanvas()) initFramebuffers();\n    applyInputs();\n    step(dt);\n    requestAnimationFrame(render);\n}\nfunction calcDeltaTime() {\n    const now = Date.now();\n    let dt = (now - lastUpdateTime) / 1000;\n    dt = Math.min(dt, 0.016666);\n    lastUpdateTime = now;\n    return dt;\n}\nfunction applyInputs() {\n    pointers.forEach((pointer)=>{\n        if (pointer.moved) {\n            pointer.moved = false;\n            splatPointer(pointer);\n        }\n    });\n}\nfunction splatPointer(pointer) {\n    const dx = pointer.deltaX * config.SPLAT_FORCE;\n    const dy = pointer.deltaY * config.SPLAT_FORCE;\n    splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n}\nfunction splat(x, y, dx, dy, color) {\n    if (!gl || !programs.splat || !dye) return;\n    gl.useProgram(programs.splat);\n    gl.uniform1i(gl.getUniformLocation(programs.splat, \"uTexture\"), dye.read.attach(0));\n    gl.uniform1f(gl.getUniformLocation(programs.splat, \"aspectRatio\"), canvas.width / canvas.height);\n    gl.uniform2f(gl.getUniformLocation(programs.splat, \"point\"), x, y);\n    gl.uniform3f(gl.getUniformLocation(programs.splat, \"color\"), color.r, color.g, color.b);\n    gl.uniform1f(gl.getUniformLocation(programs.splat, \"radius\"), config.SPLAT_RADIUS);\n    gl.uniform1f(gl.getUniformLocation(programs.splat, \"time\"), (Date.now() - startTime) / 1000);\n    blit(dye.write);\n    dye.swap();\n}\nfunction step(dt) {\n    if (!gl || !programs.display || !dye) return;\n    // Simple display with fade\n    gl.useProgram(programs.display);\n    gl.uniform1i(gl.getUniformLocation(programs.display, \"uTexture\"), dye.read.attach(0));\n    gl.uniform1f(gl.getUniformLocation(programs.display, \"time\"), (Date.now() - startTime) / 1000);\n    blit(null);\n}\nfunction resizeCanvas() {\n    if (!canvas) return false;\n    const width = scaleByPixelRatio(canvas.clientWidth);\n    const height = scaleByPixelRatio(canvas.clientHeight);\n    if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\nfunction initFramebuffers() {\n    if (!gl) return;\n    const simRes = {\n        width: 512,\n        height: 512\n    };\n    dye = {\n        read: createFBO(simRes.width, simRes.height),\n        write: createFBO(simRes.width, simRes.height),\n        swap () {\n            const temp = this.read;\n            this.read = this.write;\n            this.write = temp;\n        }\n    };\n}\n// Event handlers\nfunction updatePointerMoveData(pointer, posX, posY) {\n    if (!canvas) return;\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.texcoordX = posX / canvas.width;\n    pointer.texcoordY = 1.0 - posY / canvas.height;\n    pointer.deltaX = pointer.texcoordX - pointer.prevTexcoordX;\n    pointer.deltaY = pointer.texcoordY - pointer.prevTexcoordY;\n    pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n}\nfunction attachEventListeners() {\n    if ( false || !canvas) return;\n    const body = document.querySelector(\"body\");\n    if (!body) return;\n    const mouseMoveHandler = (e)=>{\n        if (!pointers[0]) return;\n        const pointer = pointers[0];\n        const posX = scaleByPixelRatio(e.clientX);\n        const posY = scaleByPixelRatio(e.clientY);\n        updatePointerMoveData(pointer, posX, posY);\n    };\n    const touchMoveHandler = (e)=>{\n        e.preventDefault();\n        if (e.touches.length > 0 && pointers[0]) {\n            const touch = e.touches[0];\n            const posX = scaleByPixelRatio(touch.clientX);\n            const posY = scaleByPixelRatio(touch.clientY);\n            updatePointerMoveData(pointers[0], posX, posY);\n        }\n    };\n    body.addEventListener(\"mousemove\", mouseMoveHandler);\n    body.addEventListener(\"touchmove\", touchMoveHandler, {\n        passive: false\n    });\n}\n// Main initialization\nfunction initFluidSimulation() {\n    if (false) {}\n    if (fluidInitialized) {\n        console.log(\"Fluid already initialized\");\n        attachEventListeners();\n        return;\n    }\n    console.log(\"Initializing WebGL fluid simulation...\");\n    canvas = document.getElementById(\"fluid\");\n    if (!canvas) {\n        console.error(\"Fluid canvas not found\");\n        return;\n    }\n    const webglContext = getWebGLContext(canvas);\n    if (!webglContext) {\n        console.error(\"Failed to get WebGL context\");\n        return;\n    }\n    gl = webglContext.gl;\n    ext = webglContext.ext;\n    // Configuration\n    config = {\n        SPLAT_RADIUS: 0.25,\n        SPLAT_FORCE: 6000,\n        DENSITY_DISSIPATION: 1,\n        VELOCITY_DISSIPATION: 0.2,\n        PRESSURE: 0.8,\n        CURL: 30,\n        COLOR_UPDATE_SPEED: 10\n    };\n    // Create shaders\n    const vertexShader = compileShader(gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const displayFragmentShader = compileShader(gl.FRAGMENT_SHADER, displayShaderSource);\n    if (!vertexShader || !fragmentShader || !displayFragmentShader) {\n        console.error(\"Failed to compile shaders\");\n        return;\n    }\n    programs.splat = createProgram(vertexShader, fragmentShader);\n    programs.display = createProgram(vertexShader, displayFragmentShader);\n    if (!programs.splat || !programs.display) {\n        console.error(\"Failed to create programs\");\n        return;\n    }\n    // Setup\n    setupBlit();\n    initFramebuffers();\n    // Initialize pointer\n    pointers = [\n        new Pointer()\n    ];\n    pointers[0].color = generateColor();\n    // Timing\n    lastUpdateTime = Date.now();\n    startTime = Date.now();\n    // Event listeners\n    attachEventListeners();\n    // Start render loop\n    render();\n    fluidInitialized = true;\n    console.log(\"WebGL fluid simulation initialized successfully!\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/fluid.ts\n"));

/***/ })

});